Parameters:
  LambdaStackName:
    Description: Lambda function name
    Type: String

  LambdaScraperName:
    Description: Lambda function name
    Type: String

  LambdaScraperTriggerQueueName:
    Description: SQS queue
    Type: String

Resources:
  # Lambda Functions
  LambdaStack:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaStackName
      Code:
        S3Bucket: a-tech-bucket
        S3Key: Default/index.zip
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt RoleLambdaStack.Arn
      Runtime: python3.9
      Timeout: 60

  LambdaScraper:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: a-tech-bucket
        S3Key: Default/index.zip
      FunctionName: !Ref LambdaScraperName
      Handler: index.lambda_handler
      Role: !GetAtt RoleLambdaScraper.Arn
      Timeout: 60
      MemorySize: 128
      Runtime: python3.9
      Layers:
        - arn:aws:lambda:us-east-2:336392948345:layer:AWSDataWrangler-Python39:5
        - !Ref LayerRequests
        - !Ref LayerBS4

  # Lambda Layers
  LayerRequests:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: a-requests
      Content:
        S3Bucket: a-tech-bucket
        S3Key: Layers/Requests/python.zip
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.9
        - python3.8
        - python3.7
        - python3.6

  LayerBS4:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: a-bs4
      Content:
        S3Bucket: a-tech-bucket
        S3Key: Layers/bs4/python.zip
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - python3.9
        - python3.8
        - python3.7
        - python3.6

  # Roles for Lambda Functions:
  RoleLambdaStack:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  RoleLambdaScraper:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt LambdaScraperTriggerQueue.Arn
      FunctionName: !GetAtt LambdaScraper.Arn

  # SQS
  LambdaScraperTriggerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref LambdaScraperTriggerQueueName
      DelaySeconds: 0
      VisibilityTimeout: 60

  #DynamoDBTable
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: "aNews"
      BillingMode: 'PAY_PER_REQUEST'
      ProvisionedThroughput:
        ReadCapacityUnits: "0"
        WriteCapacityUnits: "0"
      AttributeDefinitions:
        - AttributeName: "category"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "category"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"